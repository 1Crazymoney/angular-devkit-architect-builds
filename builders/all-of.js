"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const index2_1 = require("../src/index2");
exports.default = index2_1.createBuilder((options, context) => {
    const allRuns = [];
    context.reportProgress(0, (options.targets ? options.targets.length : 0)
        + (options.builders ? options.builders.length : 0));
    if (options.targets) {
        allRuns.push(...options.targets.map(({ target: targetStr, overrides }, i) => {
            const [project, target, configuration] = targetStr.split(/:/g, 3);
            return context.scheduleTarget({ project, target, configuration }, overrides || {})
                .then(run => [i, run]);
        }));
    }
    if (options.builders) {
        allRuns.push(...options.builders.map(({ builder, options }, i) => {
            return context.scheduleBuilder(builder, options || {})
                .then(run => [i, run]);
        }));
    }
    const allResults = allRuns.map(() => null);
    let n = 0;
    context.reportProgress(n++, allRuns.length);
    return rxjs_1.from(allRuns).pipe(operators_1.mergeMap(runPromise => rxjs_1.from(runPromise)), operators_1.mergeMap(([i, run]) => run.output.pipe(operators_1.map(output => [i, output]))), operators_1.mergeMap(([i, output]) => {
        allResults[i] = output;
        context.reportProgress(n++, allRuns.length);
        if (allResults.some(x => x === null)) {
            // Some builders aren't done running yet.
            return rxjs_1.EMPTY;
        }
        else {
            return rxjs_1.of({
                success: allResults.every(x => x ? x.success : false),
            });
        }
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxsLW9mLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9hcmNoaXRlY3QvYnVpbGRlcnMvYWxsLW9mLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBUUEsK0JBQXVDO0FBQ3ZDLDhDQUErQztBQUMvQywwQ0FBeUU7QUFHekUsa0JBQWUsc0JBQWEsQ0FBbUMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUU7SUFDbEYsTUFBTSxPQUFPLEdBQW9DLEVBQUUsQ0FBQztJQUVwRCxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsRUFDdEIsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1VBQzVDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNuRCxDQUFDO0lBRUYsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO1FBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMxRSxNQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxhQUFhLENBQUMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUVsRSxPQUFPLE9BQU8sQ0FBQyxjQUFjLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxFQUFFLFNBQVMsSUFBSSxFQUFFLENBQUM7aUJBQy9FLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBeUIsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDTDtJQUVELElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRTtRQUNwQixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMvRCxPQUFPLE9BQU8sQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLE9BQU8sSUFBSSxFQUFFLENBQUM7aUJBQ25ELElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBeUIsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDTDtJQUVELE1BQU0sVUFBVSxHQUE2QixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTVDLE9BQU8sV0FBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDdkIsb0JBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFdBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUN4QyxvQkFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUF1QixFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDekYsb0JBQVEsQ0FBeUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFO1FBQy9ELFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDdkIsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFNUMsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxFQUFFO1lBQ3BDLHlDQUF5QztZQUN6QyxPQUFPLFlBQUssQ0FBQztTQUNkO2FBQU07WUFDTCxPQUFPLFNBQUUsQ0FBQztnQkFDUixPQUFPLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO2FBQ3RELENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsganNvbiB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcbmltcG9ydCB7IEVNUFRZLCBmcm9tLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBtZXJnZU1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEJ1aWxkZXJPdXRwdXQsIEJ1aWxkZXJSdW4sIGNyZWF0ZUJ1aWxkZXIgfSBmcm9tICcuLi9zcmMvaW5kZXgyJztcbmltcG9ydCB7IFNjaGVtYSBhcyBPcGVyYXRvclNjaGVtYSB9IGZyb20gJy4vb3BlcmF0b3Itc2NoZW1hJztcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQnVpbGRlcjxqc29uLkpzb25PYmplY3QgJiBPcGVyYXRvclNjaGVtYT4oKG9wdGlvbnMsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgYWxsUnVuczogUHJvbWlzZTxbbnVtYmVyLCBCdWlsZGVyUnVuXT5bXSA9IFtdO1xuXG4gIGNvbnRleHQucmVwb3J0UHJvZ3Jlc3MoMCxcbiAgICAob3B0aW9ucy50YXJnZXRzID8gb3B0aW9ucy50YXJnZXRzLmxlbmd0aCA6IDApXG4gICAgKyAob3B0aW9ucy5idWlsZGVycyA/IG9wdGlvbnMuYnVpbGRlcnMubGVuZ3RoIDogMCksXG4gICk7XG5cbiAgaWYgKG9wdGlvbnMudGFyZ2V0cykge1xuICAgIGFsbFJ1bnMucHVzaCguLi5vcHRpb25zLnRhcmdldHMubWFwKCh7IHRhcmdldDogdGFyZ2V0U3RyLCBvdmVycmlkZXMgfSwgaSkgPT4ge1xuICAgICAgY29uc3QgW3Byb2plY3QsIHRhcmdldCwgY29uZmlndXJhdGlvbl0gPSB0YXJnZXRTdHIuc3BsaXQoLzovZywgMyk7XG5cbiAgICAgIHJldHVybiBjb250ZXh0LnNjaGVkdWxlVGFyZ2V0KHsgcHJvamVjdCwgdGFyZ2V0LCBjb25maWd1cmF0aW9uIH0sIG92ZXJyaWRlcyB8fCB7fSlcbiAgICAgICAgLnRoZW4ocnVuID0+IFtpLCBydW5dIGFzIFtudW1iZXIsIEJ1aWxkZXJSdW5dKTtcbiAgICB9KSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5idWlsZGVycykge1xuICAgIGFsbFJ1bnMucHVzaCguLi5vcHRpb25zLmJ1aWxkZXJzLm1hcCgoeyBidWlsZGVyLCBvcHRpb25zIH0sIGkpID0+IHtcbiAgICAgIHJldHVybiBjb250ZXh0LnNjaGVkdWxlQnVpbGRlcihidWlsZGVyLCBvcHRpb25zIHx8IHt9KVxuICAgICAgICAudGhlbihydW4gPT4gW2ksIHJ1bl0gYXMgW251bWJlciwgQnVpbGRlclJ1bl0pO1xuICAgIH0pKTtcbiAgfVxuXG4gIGNvbnN0IGFsbFJlc3VsdHM6IChCdWlsZGVyT3V0cHV0IHwgbnVsbClbXSA9IGFsbFJ1bnMubWFwKCgpID0+IG51bGwpO1xuICBsZXQgbiA9IDA7XG4gIGNvbnRleHQucmVwb3J0UHJvZ3Jlc3MobisrLCBhbGxSdW5zLmxlbmd0aCk7XG5cbiAgcmV0dXJuIGZyb20oYWxsUnVucykucGlwZShcbiAgICBtZXJnZU1hcChydW5Qcm9taXNlID0+IGZyb20ocnVuUHJvbWlzZSkpLFxuICAgIG1lcmdlTWFwKChbaSwgcnVuXTogW251bWJlciwgQnVpbGRlclJ1bl0pID0+IHJ1bi5vdXRwdXQucGlwZShtYXAob3V0cHV0ID0+IFtpLCBvdXRwdXRdKSkpLFxuICAgIG1lcmdlTWFwPFtudW1iZXIsIEJ1aWxkZXJPdXRwdXRdLCBCdWlsZGVyT3V0cHV0PigoW2ksIG91dHB1dF0pID0+IHtcbiAgICAgIGFsbFJlc3VsdHNbaV0gPSBvdXRwdXQ7XG4gICAgICBjb250ZXh0LnJlcG9ydFByb2dyZXNzKG4rKywgYWxsUnVucy5sZW5ndGgpO1xuXG4gICAgICBpZiAoYWxsUmVzdWx0cy5zb21lKHggPT4geCA9PT0gbnVsbCkpIHtcbiAgICAgICAgLy8gU29tZSBidWlsZGVycyBhcmVuJ3QgZG9uZSBydW5uaW5nIHlldC5cbiAgICAgICAgcmV0dXJuIEVNUFRZO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9mKHtcbiAgICAgICAgICBzdWNjZXNzOiBhbGxSZXN1bHRzLmV2ZXJ5KHggPT4geCA/IHguc3VjY2VzcyA6IGZhbHNlKSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSksXG4gICk7XG59KTtcbiJdfQ==