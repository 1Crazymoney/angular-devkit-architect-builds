"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const index2_1 = require("../src/index2");
exports.default = index2_1.createBuilder((options, context) => {
    const allRuns = [];
    context.reportProgress(0, (options.targets ? options.targets.length : 0)
        + (options.builders ? options.builders.length : 0));
    if (options.targets) {
        allRuns.push(...options.targets.map(({ target: targetStr, overrides }, i) => {
            const [project, target, configuration] = targetStr.split(/:/g, 3);
            return context.scheduleTarget({ project, target, configuration }, overrides || {})
                .then(run => [i, run]);
        }));
    }
    if (options.builders) {
        allRuns.push(...options.builders.map(({ builder, options }, i) => {
            return context.scheduleBuilder(builder, options || {})
                .then(run => [i, run]);
        }));
    }
    const allResults = allRuns.map(() => null);
    let n = 0;
    context.reportProgress(n++, allRuns.length);
    return rxjs_1.from(allRuns).pipe(operators_1.mergeMap(runPromise => rxjs_1.from(runPromise)), operators_1.mergeMap(([i, run]) => run.output.pipe(operators_1.map(output => [i, output]))), operators_1.mergeMap(([i, output]) => {
        allResults[i] = output;
        context.reportProgress(n++, allRuns.length);
        if (allResults.some(x => x === null)) {
            // Some builders aren't done running yet.
            return rxjs_1.EMPTY;
        }
        else {
            return rxjs_1.of({
                success: allResults.every(x => x ? x.success : false),
            });
        }
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxsLW9mLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9hcmNoaXRlY3QvYnVpbGRlcnMvYWxsLW9mLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBUUEsK0JBQXVDO0FBQ3ZDLDhDQUErQztBQUMvQywwQ0FBeUU7QUFHekUsa0JBQWUsc0JBQWEsQ0FBbUMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUU7SUFDbEYsTUFBTSxPQUFPLEdBQW9DLEVBQUUsQ0FBQztJQUVwRCxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsRUFDdEIsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1VBQzVDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNuRCxDQUFDO0lBRUYsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO1FBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMxRSxNQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxhQUFhLENBQUMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUVsRSxPQUFPLE9BQU8sQ0FBQyxjQUFjLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxFQUFFLFNBQVMsSUFBSSxFQUFFLENBQUM7aUJBQy9FLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBeUIsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDTDtJQUVELElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRTtRQUNwQixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMvRCxPQUFPLE9BQU8sQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLE9BQU8sSUFBSSxFQUFFLENBQUM7aUJBQ25ELElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBeUIsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDTDtJQUVELE1BQU0sVUFBVSxHQUE2QixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTVDLE9BQU8sV0FBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDdkIsb0JBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFdBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUN4QyxvQkFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBNEIsQ0FBQyxDQUFDLENBQUMsRUFDOUYsb0JBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUU7UUFDdkIsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUN2QixPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU1QyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLEVBQUU7WUFDcEMseUNBQXlDO1lBQ3pDLE9BQU8sWUFBSyxDQUFDO1NBQ2Q7YUFBTTtZQUNMLE9BQU8sU0FBRSxDQUFDO2dCQUNSLE9BQU8sRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7YUFDdEQsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBqc29uIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2NvcmUnO1xuaW1wb3J0IHsgRU1QVFksIGZyb20sIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIG1lcmdlTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQnVpbGRlck91dHB1dCwgQnVpbGRlclJ1biwgY3JlYXRlQnVpbGRlciB9IGZyb20gJy4uL3NyYy9pbmRleDInO1xuaW1wb3J0IHsgU2NoZW1hIGFzIE9wZXJhdG9yU2NoZW1hIH0gZnJvbSAnLi9vcGVyYXRvci1zY2hlbWEnO1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCdWlsZGVyPGpzb24uSnNvbk9iamVjdCAmIE9wZXJhdG9yU2NoZW1hPigob3B0aW9ucywgY29udGV4dCkgPT4ge1xuICBjb25zdCBhbGxSdW5zOiBQcm9taXNlPFtudW1iZXIsIEJ1aWxkZXJSdW5dPltdID0gW107XG5cbiAgY29udGV4dC5yZXBvcnRQcm9ncmVzcygwLFxuICAgIChvcHRpb25zLnRhcmdldHMgPyBvcHRpb25zLnRhcmdldHMubGVuZ3RoIDogMClcbiAgICArIChvcHRpb25zLmJ1aWxkZXJzID8gb3B0aW9ucy5idWlsZGVycy5sZW5ndGggOiAwKSxcbiAgKTtcblxuICBpZiAob3B0aW9ucy50YXJnZXRzKSB7XG4gICAgYWxsUnVucy5wdXNoKC4uLm9wdGlvbnMudGFyZ2V0cy5tYXAoKHsgdGFyZ2V0OiB0YXJnZXRTdHIsIG92ZXJyaWRlcyB9LCBpKSA9PiB7XG4gICAgICBjb25zdCBbcHJvamVjdCwgdGFyZ2V0LCBjb25maWd1cmF0aW9uXSA9IHRhcmdldFN0ci5zcGxpdCgvOi9nLCAzKTtcblxuICAgICAgcmV0dXJuIGNvbnRleHQuc2NoZWR1bGVUYXJnZXQoeyBwcm9qZWN0LCB0YXJnZXQsIGNvbmZpZ3VyYXRpb24gfSwgb3ZlcnJpZGVzIHx8IHt9KVxuICAgICAgICAudGhlbihydW4gPT4gW2ksIHJ1bl0gYXMgW251bWJlciwgQnVpbGRlclJ1bl0pO1xuICAgIH0pKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmJ1aWxkZXJzKSB7XG4gICAgYWxsUnVucy5wdXNoKC4uLm9wdGlvbnMuYnVpbGRlcnMubWFwKCh7IGJ1aWxkZXIsIG9wdGlvbnMgfSwgaSkgPT4ge1xuICAgICAgcmV0dXJuIGNvbnRleHQuc2NoZWR1bGVCdWlsZGVyKGJ1aWxkZXIsIG9wdGlvbnMgfHwge30pXG4gICAgICAgIC50aGVuKHJ1biA9PiBbaSwgcnVuXSBhcyBbbnVtYmVyLCBCdWlsZGVyUnVuXSk7XG4gICAgfSkpO1xuICB9XG5cbiAgY29uc3QgYWxsUmVzdWx0czogKEJ1aWxkZXJPdXRwdXQgfCBudWxsKVtdID0gYWxsUnVucy5tYXAoKCkgPT4gbnVsbCk7XG4gIGxldCBuID0gMDtcbiAgY29udGV4dC5yZXBvcnRQcm9ncmVzcyhuKyssIGFsbFJ1bnMubGVuZ3RoKTtcblxuICByZXR1cm4gZnJvbShhbGxSdW5zKS5waXBlKFxuICAgIG1lcmdlTWFwKHJ1blByb21pc2UgPT4gZnJvbShydW5Qcm9taXNlKSksXG4gICAgbWVyZ2VNYXAoKFtpLCBydW5dKSA9PiBydW4ub3V0cHV0LnBpcGUobWFwKG91dHB1dCA9PiBbaSwgb3V0cHV0XSBhcyBbbnVtYmVyLCBCdWlsZGVyT3V0cHV0XSkpKSxcbiAgICBtZXJnZU1hcCgoW2ksIG91dHB1dF0pID0+IHtcbiAgICAgIGFsbFJlc3VsdHNbaV0gPSBvdXRwdXQ7XG4gICAgICBjb250ZXh0LnJlcG9ydFByb2dyZXNzKG4rKywgYWxsUnVucy5sZW5ndGgpO1xuXG4gICAgICBpZiAoYWxsUmVzdWx0cy5zb21lKHggPT4geCA9PT0gbnVsbCkpIHtcbiAgICAgICAgLy8gU29tZSBidWlsZGVycyBhcmVuJ3QgZG9uZSBydW5uaW5nIHlldC5cbiAgICAgICAgcmV0dXJuIEVNUFRZO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9mKHtcbiAgICAgICAgICBzdWNjZXNzOiBhbGxSZXN1bHRzLmV2ZXJ5KHggPT4geCA/IHguc3VjY2VzcyA6IGZhbHNlKSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSksXG4gICk7XG59KTtcbiJdfQ==