"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const index2_1 = require("../src/index2");
exports.default = index2_1.createBuilder((options, context) => {
    const allRuns = [];
    context.reportProgress(0, (options.targets ? options.targets.length : 0)
        + (options.builders ? options.builders.length : 0));
    if (options.targets) {
        allRuns.push(...options.targets.map(({ target: targetStr, overrides }) => {
            const [project, target, configuration] = targetStr.split(/:/g, 3);
            return () => context.scheduleTarget({ project, target, configuration }, overrides || {});
        }));
    }
    if (options.builders) {
        allRuns.push(...options.builders.map(({ builder, options }) => {
            return () => context.scheduleBuilder(builder, options || {});
        }));
    }
    let stop = null;
    let i = 0;
    context.reportProgress(i++, allRuns.length);
    return rxjs_1.from(allRuns).pipe(operators_1.concatMap(fn => stop ? rxjs_1.of(null) : rxjs_1.from(fn()).pipe(operators_1.switchMap(run => run === null ? rxjs_1.of(null) : run.output.pipe(operators_1.first())))), operators_1.map(output => {
        context.reportProgress(i++, allRuns.length);
        if (output === null || stop !== null) {
            return stop || { success: false };
        }
        else if (output.success === false) {
            return stop = output;
        }
        else {
            return output;
        }
    }), operators_1.last());
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uY2F0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9hcmNoaXRlY3QvYnVpbGRlcnMvY29uY2F0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBUUEsK0JBQWdDO0FBQ2hDLDhDQUF3RTtBQUN4RSwwQ0FBeUU7QUFHekUsa0JBQWUsc0JBQWEsQ0FBbUMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUU7SUFDbEYsTUFBTSxPQUFPLEdBQWtDLEVBQUUsQ0FBQztJQUVsRCxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsRUFDdEIsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1VBQzVDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNuRCxDQUFDO0lBRUYsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO1FBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFO1lBQ3ZFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLGFBQWEsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBRWxFLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLEVBQUUsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzNGLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDTDtJQUVELElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRTtRQUNwQixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFO1lBQzVELE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDTDtJQUVELElBQUksSUFBSSxHQUF5QixJQUFJLENBQUM7SUFDdEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFNUMsT0FBTyxXQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUN2QixxQkFBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDL0MscUJBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQUssRUFBRSxDQUFDLENBQUMsQ0FDckUsQ0FBQyxFQUNGLGVBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNYLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLElBQUksTUFBTSxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO1lBQ3BDLE9BQU8sSUFBSSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO1NBQ25DO2FBQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxLQUFLLEtBQUssRUFBRTtZQUNuQyxPQUFPLElBQUksR0FBRyxNQUFNLENBQUM7U0FDdEI7YUFBTTtZQUNMLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7SUFDSCxDQUFDLENBQUMsRUFDRixnQkFBSSxFQUFFLENBQ1AsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsganNvbiB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcbmltcG9ydCB7IGZyb20sIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjb25jYXRNYXAsIGZpcnN0LCBsYXN0LCBtYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEJ1aWxkZXJPdXRwdXQsIEJ1aWxkZXJSdW4sIGNyZWF0ZUJ1aWxkZXIgfSBmcm9tICcuLi9zcmMvaW5kZXgyJztcbmltcG9ydCB7IFNjaGVtYSBhcyBPcGVyYXRvclNjaGVtYSB9IGZyb20gJy4vb3BlcmF0b3Itc2NoZW1hJztcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQnVpbGRlcjxqc29uLkpzb25PYmplY3QgJiBPcGVyYXRvclNjaGVtYT4oKG9wdGlvbnMsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgYWxsUnVuczogKCgpID0+IFByb21pc2U8QnVpbGRlclJ1bj4pW10gPSBbXTtcblxuICBjb250ZXh0LnJlcG9ydFByb2dyZXNzKDAsXG4gICAgKG9wdGlvbnMudGFyZ2V0cyA/IG9wdGlvbnMudGFyZ2V0cy5sZW5ndGggOiAwKVxuICAgICsgKG9wdGlvbnMuYnVpbGRlcnMgPyBvcHRpb25zLmJ1aWxkZXJzLmxlbmd0aCA6IDApLFxuICApO1xuXG4gIGlmIChvcHRpb25zLnRhcmdldHMpIHtcbiAgICBhbGxSdW5zLnB1c2goLi4ub3B0aW9ucy50YXJnZXRzLm1hcCgoeyB0YXJnZXQ6IHRhcmdldFN0ciwgb3ZlcnJpZGVzIH0pID0+IHtcbiAgICAgIGNvbnN0IFtwcm9qZWN0LCB0YXJnZXQsIGNvbmZpZ3VyYXRpb25dID0gdGFyZ2V0U3RyLnNwbGl0KC86L2csIDMpO1xuXG4gICAgICByZXR1cm4gKCkgPT4gY29udGV4dC5zY2hlZHVsZVRhcmdldCh7IHByb2plY3QsIHRhcmdldCwgY29uZmlndXJhdGlvbiB9LCBvdmVycmlkZXMgfHwge30pO1xuICAgIH0pKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmJ1aWxkZXJzKSB7XG4gICAgYWxsUnVucy5wdXNoKC4uLm9wdGlvbnMuYnVpbGRlcnMubWFwKCh7IGJ1aWxkZXIsIG9wdGlvbnMgfSkgPT4ge1xuICAgICAgcmV0dXJuICgpID0+IGNvbnRleHQuc2NoZWR1bGVCdWlsZGVyKGJ1aWxkZXIsIG9wdGlvbnMgfHwge30pO1xuICAgIH0pKTtcbiAgfVxuXG4gIGxldCBzdG9wOiBCdWlsZGVyT3V0cHV0IHwgbnVsbCA9IG51bGw7XG4gIGxldCBpID0gMDtcbiAgY29udGV4dC5yZXBvcnRQcm9ncmVzcyhpKyssIGFsbFJ1bnMubGVuZ3RoKTtcblxuICByZXR1cm4gZnJvbShhbGxSdW5zKS5waXBlKFxuICAgIGNvbmNhdE1hcChmbiA9PiBzdG9wID8gb2YobnVsbCkgOiBmcm9tKGZuKCkpLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAocnVuID0+IHJ1biA9PT0gbnVsbCA/IG9mKG51bGwpIDogcnVuLm91dHB1dC5waXBlKGZpcnN0KCkpKSxcbiAgICApKSxcbiAgICBtYXAob3V0cHV0ID0+IHtcbiAgICAgIGNvbnRleHQucmVwb3J0UHJvZ3Jlc3MoaSsrLCBhbGxSdW5zLmxlbmd0aCk7XG4gICAgICBpZiAob3V0cHV0ID09PSBudWxsIHx8IHN0b3AgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHN0b3AgfHwgeyBzdWNjZXNzOiBmYWxzZSB9O1xuICAgICAgfSBlbHNlIGlmIChvdXRwdXQuc3VjY2VzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHN0b3AgPSBvdXRwdXQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgfVxuICAgIH0pLFxuICAgIGxhc3QoKSxcbiAgKTtcbn0pO1xuIl19