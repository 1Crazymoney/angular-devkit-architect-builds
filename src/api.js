"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const progress_schema_1 = require("./progress-schema");
exports.BuilderProgressState = progress_schema_1.State;
/**
 * Returns a string of "project:target[:configuration]" for the target object.
 */
function targetStringFromTarget({ project, target, configuration }) {
    return `${project}:${target}${configuration !== undefined ? ':' + configuration : ''}`;
}
exports.targetStringFromTarget = targetStringFromTarget;
//# sourceMappingURL=data:application/json;base64,