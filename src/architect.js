"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const node_1 = require("@angular-devkit/core/node");
const Observable_1 = require("rxjs/Observable");
const forkJoin_1 = require("rxjs/observable/forkJoin");
const of_1 = require("rxjs/observable/of");
const throw_1 = require("rxjs/observable/throw");
const operators_1 = require("rxjs/operators");
class ProjectNotFoundException extends core_1.BaseException {
    constructor(name) {
        const nameOrDefault = name ? `Project '${name}'` : `Default project`;
        super(`${nameOrDefault} could not be found in workspace.`);
    }
}
exports.ProjectNotFoundException = ProjectNotFoundException;
class TargetNotFoundException extends core_1.BaseException {
    constructor(name) {
        const nameOrDefault = name ? `Target '${name}'` : `Default target`;
        super(`${nameOrDefault} could not be found in workspace.`);
    }
}
exports.TargetNotFoundException = TargetNotFoundException;
class ConfigurationNotFoundException extends core_1.BaseException {
    constructor(name) {
        super(`Configuration '${name}' could not be found in project.`);
    }
}
exports.ConfigurationNotFoundException = ConfigurationNotFoundException;
class SchemaValidationException extends core_1.BaseException {
    constructor(errors) {
        super(`Schema validation failed with the following errors:\n  ${errors.join('\n  ')}`);
    }
}
exports.SchemaValidationException = SchemaValidationException;
// TODO: break this exception apart into more granular ones.
class BuilderCannotBeResolvedException extends core_1.BaseException {
    constructor(builder) {
        super(`Builder '${builder}' cannot be resolved.`);
    }
}
exports.BuilderCannotBeResolvedException = BuilderCannotBeResolvedException;
class WorkspaceNotYetLoadedException extends core_1.BaseException {
    constructor() { super(`Workspace needs to be loaded before Architect is used.`); }
}
exports.WorkspaceNotYetLoadedException = WorkspaceNotYetLoadedException;
class BuilderNotFoundException extends core_1.BaseException {
    constructor(builder) {
        super(`Builder ${builder} could not be found.`);
    }
}
exports.BuilderNotFoundException = BuilderNotFoundException;
class Architect {
    constructor(_root, _host) {
        this._root = _root;
        this._host = _host;
        this._workspaceSchemaPath = core_1.join(core_1.normalize(__dirname), 'workspace-schema.json');
        this._buildersSchemaPath = core_1.join(core_1.normalize(__dirname), 'builders-schema.json');
        this._architectSchemasLoaded = false;
        this._builderPathsMap = new Map();
        this._builderDescriptionMap = new Map();
        this._builderConstructorMap = new Map();
    }
    loadWorkspaceFromHost(workspacePath) {
        return this._loadArchitectSchemas().pipe(operators_1.concatMap(() => this._loadJsonFile(core_1.join(this._root, workspacePath))), operators_1.concatMap(json => this.loadWorkspaceFromJson(json)));
    }
    loadWorkspaceFromJson(json) {
        return this._loadArchitectSchemas().pipe(operators_1.concatMap(() => this._validateAgainstSchema(json, this._workspaceSchema)), operators_1.concatMap((validatedWorkspace) => {
            this._workspace = validatedWorkspace;
            return of_1.of(this);
        }));
    }
    _loadArchitectSchemas() {
        if (this._architectSchemasLoaded) {
            return of_1.of(null);
        }
        else {
            return forkJoin_1.forkJoin(this._loadJsonFile(this._workspaceSchemaPath), this._loadJsonFile(this._buildersSchemaPath)).pipe(operators_1.concatMap(([workspaceSchema, buildersSchema]) => {
                this._workspaceSchema = workspaceSchema;
                this._buildersSchema = buildersSchema;
                return of_1.of(null);
            }));
        }
    }
    getTarget(options = {}) {
        let { project, target: targetName } = options;
        const { configuration, overrides } = options;
        if (!this._workspace) {
            throw new WorkspaceNotYetLoadedException();
        }
        project = project || this._workspace.defaultProject;
        const workspaceProject = this._workspace.projects[project];
        if (!workspaceProject) {
            throw new ProjectNotFoundException(project);
        }
        targetName = targetName || workspaceProject.defaultTarget;
        const workspaceTarget = workspaceProject.targets[targetName];
        if (!workspaceTarget) {
            throw new TargetNotFoundException(targetName);
        }
        const workspaceTargetOptions = workspaceTarget.options;
        let workspaceConfiguration;
        if (configuration) {
            workspaceConfiguration = workspaceTarget.configurations
                && workspaceTarget.configurations[configuration];
            if (!workspaceConfiguration) {
                throw new ConfigurationNotFoundException(configuration);
            }
        }
        // Resolve root for the target.
        // TODO: add Path format to JSON schemas
        const target = {
            root: core_1.resolve(this._root, core_1.normalize(workspaceProject.root)),
            projectType: workspaceProject.projectType,
            builder: workspaceTarget.builder,
            options: Object.assign({}, workspaceTargetOptions, workspaceConfiguration, overrides),
        };
        // Return a copy of the target object, JSON validation changes objects and we don't
        // want the original properties to be modified.
        return JSON.parse(JSON.stringify(target));
    }
    // Will run the target using the target.
    run(target, partialContext = {}) {
        const context = Object.assign({ logger: new core_1.logging.NullLogger(), architect: this, host: this._host }, partialContext);
        let builderDescription;
        return this.getBuilderDescription(target).pipe(operators_1.concatMap(description => {
            builderDescription = description;
            return this.validateBuilderOptions(target, builderDescription);
        }), operators_1.map(() => this.getBuilder(builderDescription, context)), operators_1.concatMap(builder => builder.run(target)));
    }
    getBuilderDescription(target) {
        // Check cache for this builder description.
        if (this._builderDescriptionMap.has(target.builder)) {
            return of_1.of(this._builderDescriptionMap.get(target.builder));
        }
        return new Observable_1.Observable((obs) => {
            // TODO: this probably needs to be more like NodeModulesEngineHost.
            const basedir = core_1.getSystemPath(this._root);
            const [pkg, builderName] = target.builder.split(':');
            const pkgJsonPath = node_1.resolve(pkg, { basedir, resolvePackageJson: true });
            let buildersJsonPath;
            let builderPaths;
            // Read the `builders` entry of package.json.
            return this._loadJsonFile(core_1.normalize(pkgJsonPath)).pipe(operators_1.concatMap((pkgJson) => {
                const pkgJsonBuildersentry = pkgJson['builders'];
                if (!pkgJsonBuildersentry) {
                    throw new BuilderCannotBeResolvedException(target.builder);
                }
                buildersJsonPath = core_1.join(core_1.dirname(core_1.normalize(pkgJsonPath)), pkgJsonBuildersentry);
                return this._loadJsonFile(buildersJsonPath);
            }), 
            // Validate builders json.
            operators_1.concatMap((builderPathsMap) => this._validateAgainstSchema(builderPathsMap, this._buildersSchema)), operators_1.concatMap((builderPathsMap) => {
                builderPaths = builderPathsMap.builders[builderName];
                if (!builderPaths) {
                    throw new BuilderCannotBeResolvedException(target.builder);
                }
                // Resolve paths in the builder paths.
                const builderJsonDir = core_1.dirname(buildersJsonPath);
                builderPaths.schema = core_1.join(builderJsonDir, builderPaths.schema);
                builderPaths.class = core_1.join(builderJsonDir, builderPaths.class);
                // Save the builder paths so that we can lazily load the builder.
                this._builderPathsMap.set(target.builder, builderPaths);
                // Load the schema.
                return this._loadJsonFile(builderPaths.schema);
            }), operators_1.map(builderSchema => {
                const builderDescription = {
                    name: target.builder,
                    schema: builderSchema,
                    description: builderPaths.description,
                };
                // Save to cache before returning.
                this._builderDescriptionMap.set(builderDescription.name, builderDescription);
                return builderDescription;
            })).subscribe(obs);
        });
    }
    validateBuilderOptions(target, builderDescription) {
        return this._validateAgainstSchema(target.options, builderDescription.schema);
    }
    getBuilder(builderDescription, context) {
        const name = builderDescription.name;
        let builderConstructor;
        // Check cache for this builder.
        if (this._builderConstructorMap.has(name)) {
            builderConstructor = this._builderConstructorMap.get(name);
        }
        else {
            if (!this._builderPathsMap.has(name)) {
                throw new BuilderNotFoundException(name);
            }
            const builderPaths = this._builderPathsMap.get(name);
            // TODO: support more than the default export, maybe via builder#import-name.
            const builderModule = require(core_1.getSystemPath(builderPaths.class));
            builderConstructor = builderModule['default'];
            // Save builder to cache before returning.
            this._builderConstructorMap.set(builderDescription.name, builderConstructor);
        }
        const builder = new builderConstructor(context);
        return builder;
    }
    // Warning: this method changes contentJson in place.
    // TODO: add transforms to resolve paths.
    _validateAgainstSchema(contentJson, schemaJson) {
        const registry = new core_1.schema.CoreSchemaRegistry();
        return registry.compile(schemaJson).pipe(operators_1.concatMap(validator => validator(contentJson)), operators_1.concatMap(validatorResult => {
            if (validatorResult.success) {
                return of_1.of(contentJson);
            }
            else {
                return throw_1._throw(new SchemaValidationException(validatorResult.errors));
            }
        }));
    }
    _loadJsonFile(path) {
        return this._host.read(core_1.normalize(path)).pipe(operators_1.map(buffer => core_1.virtualFs.fileBufferToString(buffer)), operators_1.map(str => core_1.parseJson(str, core_1.JsonParseMode.Loose)));
    }
}
exports.Architect = Architect;
//# sourceMappingURL=data:application/json;base64,