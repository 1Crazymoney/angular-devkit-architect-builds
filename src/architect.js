"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const node_1 = require("@angular-devkit/core/node");
const Observable_1 = require("rxjs/Observable");
const of_1 = require("rxjs/observable/of");
const throw_1 = require("rxjs/observable/throw");
const operators_1 = require("rxjs/operators");
class ProjectNotFoundException extends core_1.BaseException {
    constructor(name) {
        const nameOrDefault = name ? `Project '${name}'` : `Default project`;
        super(`${nameOrDefault} could not be found in workspace.`);
    }
}
exports.ProjectNotFoundException = ProjectNotFoundException;
class TargetNotFoundException extends core_1.BaseException {
    constructor(name) {
        const nameOrDefault = name ? `Target '${name}'` : `Default target`;
        super(`${nameOrDefault} could not be found in workspace.`);
    }
}
exports.TargetNotFoundException = TargetNotFoundException;
class ConfigurationNotFoundException extends core_1.BaseException {
    constructor(name) {
        super(`Configuration '${name}' could not be found in project.`);
    }
}
exports.ConfigurationNotFoundException = ConfigurationNotFoundException;
class SchemaValidationException extends core_1.BaseException {
    constructor(errors) {
        super(`Schema validation failed with the following errors:\n  ${errors.join('\n  ')}`);
    }
}
exports.SchemaValidationException = SchemaValidationException;
// TODO: break this exception apart into more granular ones.
class BuilderCannotBeResolvedException extends core_1.BaseException {
    constructor(builder) {
        super(`Builder '${builder}' cannot be resolved.`);
    }
}
exports.BuilderCannotBeResolvedException = BuilderCannotBeResolvedException;
class WorkspaceNotYetLoadedException extends core_1.BaseException {
    constructor() { super(`Workspace needs to be loaded before Architect is used.`); }
}
exports.WorkspaceNotYetLoadedException = WorkspaceNotYetLoadedException;
class Architect {
    constructor(_root, _host) {
        this._root = _root;
        this._host = _host;
        this._workspaceSchema = core_1.join(core_1.normalize(__dirname), 'workspace-schema.json');
        this._buildersSchema = core_1.join(core_1.normalize(__dirname), 'builders-schema.json');
    }
    loadWorkspaceFromHost(workspacePath) {
        return this._host.read(core_1.join(this._root, workspacePath)).pipe(operators_1.concatMap((buffer) => {
            const json = JSON.parse(core_1.virtualFs.fileBufferToString(buffer));
            return this.loadWorkspaceFromJson(json);
        }));
    }
    loadWorkspaceFromJson(json) {
        return this._validateAgainstSchema(json, this._workspaceSchema).pipe(operators_1.concatMap((validatedWorkspace) => {
            this._workspace = validatedWorkspace;
            return of_1.of(this);
        }));
    }
    getTarget(options = {}) {
        let { project, target: targetName } = options;
        const { configuration, overrides } = options;
        if (!this._workspace) {
            throw new WorkspaceNotYetLoadedException();
        }
        project = project || this._workspace.defaultProject;
        const workspaceProject = this._workspace.projects[project];
        if (!workspaceProject) {
            throw new ProjectNotFoundException(project);
        }
        targetName = targetName || workspaceProject.defaultTarget;
        const workspaceTarget = workspaceProject.targets[targetName];
        if (!workspaceTarget) {
            throw new TargetNotFoundException(targetName);
        }
        const workspaceTargetOptions = workspaceTarget.options;
        let workspaceConfiguration;
        if (configuration) {
            workspaceConfiguration = workspaceTarget.configurations
                && workspaceTarget.configurations[configuration];
            if (!workspaceConfiguration) {
                throw new ConfigurationNotFoundException(configuration);
            }
        }
        // Resolve root for the target.
        // TODO: add Path format to JSON schemas
        const target = {
            root: core_1.resolve(this._root, core_1.normalize(workspaceProject.root)),
            projectType: workspaceProject.projectType,
            builder: workspaceTarget.builder,
            options: Object.assign({}, workspaceTargetOptions, workspaceConfiguration, overrides),
        };
        // Return a copy of the target object, JSON validation changes objects and we don't
        // want the original properties to be modified.
        return JSON.parse(JSON.stringify(target));
    }
    // Will run the target using the target.
    run(target, partialContext = {}) {
        const context = Object.assign({ logger: new core_1.logging.NullLogger(), architect: this, host: this._host }, partialContext);
        let builderDescription;
        return this.getBuilderDescription(target).pipe(operators_1.concatMap(description => {
            builderDescription = description;
            return this.validateBuilderOptions(target, builderDescription);
        }), operators_1.concatMap(() => of_1.of(this.getBuilder(builderDescription, context))), operators_1.concatMap(builder => builder.run(target)));
    }
    getBuilderDescription(target) {
        return new Observable_1.Observable((obs) => {
            // TODO: this probably needs to be more like NodeModulesEngineHost.
            const basedir = core_1.getSystemPath(this._root);
            const [pkg, builderName] = target.builder.split(':');
            const pkgJsonPath = node_1.resolve(pkg, { basedir, resolvePackageJson: true });
            let buildersJsonPath;
            // Read the `builders` entry of package.json.
            return this._host.read(core_1.normalize(pkgJsonPath)).pipe(operators_1.concatMap(buffer => of_1.of(core_1.parseJson(core_1.virtualFs.fileBufferToString(buffer), core_1.JsonParseMode.Loose))), operators_1.concatMap((pkgJson) => {
                const pkgJsonBuildersentry = pkgJson['builders'];
                if (!pkgJsonBuildersentry) {
                    throw new BuilderCannotBeResolvedException(target.builder);
                }
                buildersJsonPath = core_1.join(core_1.dirname(core_1.normalize(pkgJsonPath)), pkgJsonBuildersentry);
                return this._host.read(buildersJsonPath);
            }), operators_1.concatMap((buffer) => of_1.of(JSON.parse(core_1.virtualFs.fileBufferToString(buffer)))), 
            // Validate builders json.
            operators_1.concatMap((builderMap) => this._validateAgainstSchema(builderMap, this._buildersSchema)), operators_1.concatMap((builderMap) => {
                const builderDescription = builderMap.builders[builderName];
                if (!builderDescription) {
                    throw new BuilderCannotBeResolvedException(target.builder);
                }
                // Resolve paths in the builder description.
                const builderJsonDir = core_1.dirname(buildersJsonPath);
                builderDescription.schema = core_1.join(builderJsonDir, builderDescription.schema);
                builderDescription.class = core_1.join(builderJsonDir, builderDescription.class);
                // Validate options again builder schema.
                return of_1.of(builderDescription);
            })).subscribe(obs);
        });
    }
    validateBuilderOptions(target, builderDescription) {
        return this._validateAgainstSchema(target.options, core_1.normalize(builderDescription.schema));
    }
    getBuilder(builderDescription, context) {
        // TODO: support more than the default export, maybe via builder#import-name.
        const builderModule = require(core_1.getSystemPath(builderDescription.class));
        const builderClass = builderModule['default'];
        return new builderClass(context);
    }
    // Warning: this method changes contentJson in place.
    // TODO: add transforms to resolve paths.
    _validateAgainstSchema(contentJson, schemaPath) {
        const registry = new core_1.schema.CoreSchemaRegistry();
        return this._host.read(schemaPath).pipe(operators_1.concatMap((buffer) => of_1.of(JSON.parse(core_1.virtualFs.fileBufferToString(buffer)))), operators_1.concatMap((schemaContent) => registry.compile(schemaContent)), operators_1.concatMap(validator => validator(contentJson)), operators_1.concatMap(validatorResult => {
            if (validatorResult.success) {
                return of_1.of(contentJson);
            }
            else {
                return throw_1._throw(new SchemaValidationException(validatorResult.errors));
            }
        }));
    }
}
exports.Architect = Architect;
//# sourceMappingURL=data:application/json;base64,