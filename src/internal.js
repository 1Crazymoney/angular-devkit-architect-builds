"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Internal types that should not be exported directly. These are used by the host and architect
// itself. Host implementations should import the host.ts file.
/**
 * BuilderSymbol used for knowing if a function was created using createBuilder(). This is a
 * property set on the function that should be `true`.
 * Using Symbol.for() as it's a global registry that's the same for all installations of
 * Architect (if some libraries depends directly on architect instead of sharing the files).
 */
exports.BuilderSymbol = Symbol.for('@angular-devkit/architect:builder');
/**
 * BuilderVersionSymbol used for knowing which version of the library createBuilder() came from.
 * This is to make sure we don't try to use an incompatible builder.
 * Using Symbol.for() as it's a global registry that's the same for all installations of
 * Architect (if some libraries depends directly on architect instead of sharing the files).
 */
exports.BuilderVersionSymbol = Symbol.for('@angular-devkit/architect:version');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWwuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2FyY2hpdGVjdC9zcmMvaW50ZXJuYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFVQSxnR0FBZ0c7QUFDaEcsK0RBQStEO0FBRS9EOzs7OztHQUtHO0FBQ1UsUUFBQSxhQUFhLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0FBRTdFOzs7OztHQUtHO0FBQ1UsUUFBQSxvQkFBb0IsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLG1DQUFtQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBleHBlcmltZW50YWwsIGpzb24gfSBmcm9tICdAYW5ndWxhci1kZXZraXQvY29yZSc7XG5pbXBvcnQgeyBCdWlsZGVySW5mbywgQnVpbGRlcklucHV0LCBCdWlsZGVyT3V0cHV0LCBUYXJnZXQgfSBmcm9tICcuL2FwaSc7XG5cbi8vIEludGVybmFsIHR5cGVzIHRoYXQgc2hvdWxkIG5vdCBiZSBleHBvcnRlZCBkaXJlY3RseS4gVGhlc2UgYXJlIHVzZWQgYnkgdGhlIGhvc3QgYW5kIGFyY2hpdGVjdFxuLy8gaXRzZWxmLiBIb3N0IGltcGxlbWVudGF0aW9ucyBzaG91bGQgaW1wb3J0IHRoZSBob3N0LnRzIGZpbGUuXG5cbi8qKlxuICogQnVpbGRlclN5bWJvbCB1c2VkIGZvciBrbm93aW5nIGlmIGEgZnVuY3Rpb24gd2FzIGNyZWF0ZWQgdXNpbmcgY3JlYXRlQnVpbGRlcigpLiBUaGlzIGlzIGFcbiAqIHByb3BlcnR5IHNldCBvbiB0aGUgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgYHRydWVgLlxuICogVXNpbmcgU3ltYm9sLmZvcigpIGFzIGl0J3MgYSBnbG9iYWwgcmVnaXN0cnkgdGhhdCdzIHRoZSBzYW1lIGZvciBhbGwgaW5zdGFsbGF0aW9ucyBvZlxuICogQXJjaGl0ZWN0IChpZiBzb21lIGxpYnJhcmllcyBkZXBlbmRzIGRpcmVjdGx5IG9uIGFyY2hpdGVjdCBpbnN0ZWFkIG9mIHNoYXJpbmcgdGhlIGZpbGVzKS5cbiAqL1xuZXhwb3J0IGNvbnN0IEJ1aWxkZXJTeW1ib2wgPSBTeW1ib2wuZm9yKCdAYW5ndWxhci1kZXZraXQvYXJjaGl0ZWN0OmJ1aWxkZXInKTtcblxuLyoqXG4gKiBCdWlsZGVyVmVyc2lvblN5bWJvbCB1c2VkIGZvciBrbm93aW5nIHdoaWNoIHZlcnNpb24gb2YgdGhlIGxpYnJhcnkgY3JlYXRlQnVpbGRlcigpIGNhbWUgZnJvbS5cbiAqIFRoaXMgaXMgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHRyeSB0byB1c2UgYW4gaW5jb21wYXRpYmxlIGJ1aWxkZXIuXG4gKiBVc2luZyBTeW1ib2wuZm9yKCkgYXMgaXQncyBhIGdsb2JhbCByZWdpc3RyeSB0aGF0J3MgdGhlIHNhbWUgZm9yIGFsbCBpbnN0YWxsYXRpb25zIG9mXG4gKiBBcmNoaXRlY3QgKGlmIHNvbWUgbGlicmFyaWVzIGRlcGVuZHMgZGlyZWN0bHkgb24gYXJjaGl0ZWN0IGluc3RlYWQgb2Ygc2hhcmluZyB0aGUgZmlsZXMpLlxuICovXG5leHBvcnQgY29uc3QgQnVpbGRlclZlcnNpb25TeW1ib2wgPSBTeW1ib2wuZm9yKCdAYW5ndWxhci1kZXZraXQvYXJjaGl0ZWN0OnZlcnNpb24nKTtcblxuLyoqXG4gKiBBIFNwZWNpYWxpemF0aW9uIG9mIHRoZSBKb2JIYW5kbGVyIHR5cGUuIFRoaXMgZXhwb3NlcyBCdWlsZGVyRGVzY3JpcHRpb24gYXMgdGhlIGpvYiBkZXNjcmlwdGlvblxuICogdHlwZS5cbiAqL1xuZXhwb3J0IHR5cGUgQnVpbGRlckpvYkhhbmRsZXI8XG4gIEEgZXh0ZW5kcyBqc29uLkpzb25PYmplY3QgPSBqc29uLkpzb25PYmplY3QsXG4gIEkgZXh0ZW5kcyBCdWlsZGVySW5wdXQgPSBCdWlsZGVySW5wdXQsXG4gIE8gZXh0ZW5kcyBCdWlsZGVyT3V0cHV0ID0gQnVpbGRlck91dHB1dCxcbj4gPSBleHBlcmltZW50YWwuam9icy5Kb2JIYW5kbGVyPEEsIEksIE8+ICYgeyBqb2JEZXNjcmlwdGlvbjogQnVpbGRlckRlc2NyaXB0aW9uIH07XG5cbi8qKlxuICogQSBCdWlsZGVyIGRlc2NyaXB0aW9uLCB3aGljaCBpcyB1c2VkIGludGVybmFsbHkuIEFkZHMgdGhlIGJ1aWxkZXIgaW5mbyB3aGljaCBpcyB0aGVcbiAqIG1ldGFkYXRhIGF0dGFjaGVkIHRvIGEgYnVpbGRlciBpbiBBcmNoaXRlY3QuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnVpbGRlckRlc2NyaXB0aW9uIGV4dGVuZHMgZXhwZXJpbWVudGFsLmpvYnMuSm9iRGVzY3JpcHRpb24ge1xuICBpbmZvOiBCdWlsZGVySW5mbztcbn1cblxuLyoqXG4gKiBBIEJ1aWxkZXIgaW5zdGFuY2UuIFVzZSBjcmVhdGVCdWlsZGVyKCkgdG8gY3JlYXRlIG9uZSBvZiB0aGVzZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCdWlsZGVyPE9wdGlvblQgZXh0ZW5kcyBqc29uLkpzb25PYmplY3QgPSBqc29uLkpzb25PYmplY3Q+IHtcbiAgLy8gQSBmdWxseSBjb21wYXRpYmxlIGpvYiBoYW5kbGVyLlxuICBoYW5kbGVyOiBleHBlcmltZW50YWwuam9icy5Kb2JIYW5kbGVyPGpzb24uSnNvbk9iamVjdCwgQnVpbGRlcklucHV0LCBCdWlsZGVyT3V0cHV0PjtcblxuICAvLyBNZXRhZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhpcyBidWlsZGVyLlxuICBbQnVpbGRlclN5bWJvbF06IHRydWU7XG4gIFtCdWlsZGVyVmVyc2lvblN5bWJvbF06IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcmNoaXRlY3RIb3N0PEJ1aWxkZXJJbmZvVCBleHRlbmRzIEJ1aWxkZXJJbmZvID0gQnVpbGRlckluZm8+IHtcbiAgLyoqXG4gICAqIEdldCB0aGUgYnVpbGRlciBuYW1lIGZvciBhIHRhcmdldC5cbiAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IHRvIGluc3BlY3QuXG4gICAqL1xuICBnZXRCdWlsZGVyTmFtZUZvclRhcmdldCh0YXJnZXQ6IFRhcmdldCk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD47XG5cbiAgLyoqXG4gICAqIFJlc29sdmUgYSBidWlsZGVyLiBUaGlzIG5lZWRzIHRvIHJldHVybiBhIHN0cmluZyB3aGljaCB3aWxsIGJlIHVzZWQgaW4gYSBkeW5hbWljIGBpbXBvcnQoKWBcbiAgICogY2xhdXNlLiBUaGlzIHNob3VsZCB0aHJvdyBpZiBubyBidWlsZGVyIGNhbiBiZSBmb3VuZC4gVGhlIGR5bmFtaWMgaW1wb3J0IHdpbGwgdGhyb3cgaWZcbiAgICogaXQgaXMgdW5zdXBwb3J0ZWQuXG4gICAqIEBwYXJhbSBidWlsZGVyTmFtZSBUaGUgbmFtZSBvZiB0aGUgYnVpbGRlciB0byBiZSB1c2VkLlxuICAgKiBAcmV0dXJucyBBbGwgdGhlIGluZm8gbmVlZGVkIGZvciB0aGUgYnVpbGRlciBpdHNlbGYuXG4gICAqL1xuICByZXNvbHZlQnVpbGRlcihidWlsZGVyTmFtZTogc3RyaW5nKTogUHJvbWlzZTxCdWlsZGVySW5mb1QgfCBudWxsPjtcbiAgbG9hZEJ1aWxkZXIoaW5mbzogQnVpbGRlckluZm9UKTogUHJvbWlzZTxCdWlsZGVyIHwgbnVsbD47XG5cbiAgZ2V0Q3VycmVudERpcmVjdG9yeSgpOiBQcm9taXNlPHN0cmluZz47XG4gIGdldFdvcmtzcGFjZVJvb3QoKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIGdldE9wdGlvbnNGb3JUYXJnZXQodGFyZ2V0OiBUYXJnZXQpOiBQcm9taXNlPGpzb24uSnNvbk9iamVjdCB8IG51bGw+O1xufVxuIl19