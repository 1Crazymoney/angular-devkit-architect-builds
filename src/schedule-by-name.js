"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const core_1 = require("@angular-devkit/core");
const operators_1 = require("rxjs/operators");
const api_1 = require("./api");
const progressSchema = require('./progress-schema.json');
let _uniqueId = 0;
async function scheduleByName(name, buildOptions, options) {
    const childLoggerName = options.target ? `{${api_1.targetStringFromTarget(options.target)}}` : name;
    const logger = options.logger.createChild(childLoggerName);
    const job = options.scheduler.schedule(name, {});
    let stateSubscription;
    const workspaceRoot = await options.workspaceRoot;
    const currentDirectory = await options.currentDirectory;
    const description = await job.description.toPromise();
    const info = description.info;
    const id = ++_uniqueId;
    const message = Object.assign({ id, currentDirectory: workspaceRoot, workspaceRoot: currentDirectory, info: info, options: buildOptions }, (options.target ? { target: options.target } : {}));
    // Wait for the job to be ready.
    if (job.state !== core_1.experimental.jobs.JobState.Started) {
        stateSubscription = job.outboundBus.subscribe(event => {
            if (event.kind === core_1.experimental.jobs.JobOutboundMessageKind.Start) {
                job.input.next(message);
            }
        });
    }
    else {
        job.input.next(message);
    }
    const logChannelSub = job.getChannel('log').subscribe(entry => {
        logger.next(entry);
    });
    const s = job.outboundBus.subscribe(undefined, undefined, () => {
        s.unsubscribe();
        logChannelSub.unsubscribe();
        if (stateSubscription) {
            stateSubscription.unsubscribe();
        }
    });
    const output = job.output.pipe(operators_1.map(output => (Object.assign({}, output, options.target ? { target: options.target } : 0, { info }))));
    return {
        id,
        info,
        result: output.pipe(operators_1.first()).toPromise(),
        output,
        progress: job.getChannel('progress', progressSchema).pipe(operators_1.shareReplay(1)),
        stop() {
            job.stop();
            return output.pipe(operators_1.ignoreElements()).toPromise();
        },
    };
}
exports.scheduleByName = scheduleByName;
async function scheduleByTarget(target, overrides, options) {
    return scheduleByName(`{${api_1.targetStringFromTarget(target)}}`, overrides, Object.assign({}, options, { target, logger: options.logger }));
}
exports.scheduleByTarget = scheduleByTarget;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUtYnktbmFtZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvYW5ndWxhcl9kZXZraXQvYXJjaGl0ZWN0L3NyYy9zY2hlZHVsZS1ieS1uYW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7OztHQU1HO0FBQ0gsK0NBQW1FO0FBRW5FLDhDQUF5RTtBQUN6RSwrQkFPZTtBQUVmLE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBR3pELElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztBQUVYLEtBQUssVUFBVSxjQUFjLENBQ2xDLElBQVksRUFDWixZQUE2QixFQUM3QixPQU1DO0lBRUQsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSw0QkFBc0IsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzlGLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzNELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFrQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbEYsSUFBSSxpQkFBK0IsQ0FBQztJQUVwQyxNQUFNLGFBQWEsR0FBRyxNQUFNLE9BQU8sQ0FBQyxhQUFhLENBQUM7SUFDbEQsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztJQUV4RCxNQUFNLFdBQVcsR0FBRyxNQUFNLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDdEQsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLElBQW1CLENBQUM7SUFDN0MsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLENBQUM7SUFFdkIsTUFBTSxPQUFPLG1CQUNYLEVBQUUsRUFDRixnQkFBZ0IsRUFBRSxhQUFhLEVBQy9CLGFBQWEsRUFBRSxnQkFBZ0IsRUFDL0IsSUFBSSxFQUFFLElBQUksRUFDVixPQUFPLEVBQUUsWUFBWSxJQUNsQixDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQ3RELENBQUM7SUFFRixnQ0FBZ0M7SUFDaEMsSUFBSSxHQUFHLENBQUMsS0FBSyxLQUFLLG1CQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUU7UUFDcEQsaUJBQWlCLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDcEQsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLG1CQUFZLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEtBQUssRUFBRTtnQkFDakUsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDekI7UUFDSCxDQUFDLENBQUMsQ0FBQztLQUNKO1NBQU07UUFDTCxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN6QjtJQUVELE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQW1CLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUM5RSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQ2pDLFNBQVMsRUFDVCxTQUFTLEVBQ1QsR0FBRyxFQUFFO1FBQ0gsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2hCLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM1QixJQUFJLGlCQUFpQixFQUFFO1lBQ3JCLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQyxDQUNGLENBQUM7SUFDRixNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDNUIsZUFBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxrQkFDVixNQUFNLEVBQ04sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQ2xELElBQUksR0FDYSxDQUFBLENBQUMsQ0FDckIsQ0FBQztJQUVGLE9BQU87UUFDTCxFQUFFO1FBQ0YsSUFBSTtRQUNKLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFLLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRTtRQUN4QyxNQUFNO1FBQ04sUUFBUSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQXdCLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQzlFLHVCQUFXLENBQUMsQ0FBQyxDQUFDLENBQ2Y7UUFDRCxJQUFJO1lBQ0YsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1lBRVgsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLDBCQUFjLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ25ELENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQztBQWhGRCx3Q0FnRkM7QUFFTSxLQUFLLFVBQVUsZ0JBQWdCLENBQ3BDLE1BQWMsRUFDZCxTQUEwQixFQUMxQixPQUtDO0lBRUQsT0FBTyxjQUFjLENBQUMsSUFBSSw0QkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLFNBQVMsb0JBQ2pFLE9BQU8sSUFDVixNQUFNLEVBQ04sTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLElBQ3RCLENBQUM7QUFDTCxDQUFDO0FBZkQsNENBZUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBleHBlcmltZW50YWwsIGpzb24sIGxvZ2dpbmcgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpcnN0LCBpZ25vcmVFbGVtZW50cywgbWFwLCBzaGFyZVJlcGxheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7XG4gIEJ1aWxkZXJJbmZvLFxuICBCdWlsZGVySW5wdXQsXG4gIEJ1aWxkZXJPdXRwdXQsIEJ1aWxkZXJQcm9ncmVzc1JlcG9ydCxcbiAgQnVpbGRlclJ1bixcbiAgVGFyZ2V0LFxuICB0YXJnZXRTdHJpbmdGcm9tVGFyZ2V0LFxufSBmcm9tICcuL2FwaSc7XG5cbmNvbnN0IHByb2dyZXNzU2NoZW1hID0gcmVxdWlyZSgnLi9wcm9ncmVzcy1zY2hlbWEuanNvbicpO1xuXG5cbmxldCBfdW5pcXVlSWQgPSAwO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2NoZWR1bGVCeU5hbWUoXG4gIG5hbWU6IHN0cmluZyxcbiAgYnVpbGRPcHRpb25zOiBqc29uLkpzb25PYmplY3QsXG4gIG9wdGlvbnM6IHtcbiAgICB0YXJnZXQ/OiBUYXJnZXQsXG4gICAgc2NoZWR1bGVyOiBleHBlcmltZW50YWwuam9icy5TY2hlZHVsZXIsXG4gICAgbG9nZ2VyOiBsb2dnaW5nLkxvZ2dlckFwaSxcbiAgICB3b3Jrc3BhY2VSb290OiBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz4sXG4gICAgY3VycmVudERpcmVjdG9yeTogc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+LFxuICB9LFxuKTogUHJvbWlzZTxCdWlsZGVyUnVuPiB7XG4gIGNvbnN0IGNoaWxkTG9nZ2VyTmFtZSA9IG9wdGlvbnMudGFyZ2V0ID8gYHske3RhcmdldFN0cmluZ0Zyb21UYXJnZXQob3B0aW9ucy50YXJnZXQpfX1gIDogbmFtZTtcbiAgY29uc3QgbG9nZ2VyID0gb3B0aW9ucy5sb2dnZXIuY3JlYXRlQ2hpbGQoY2hpbGRMb2dnZXJOYW1lKTtcbiAgY29uc3Qgam9iID0gb3B0aW9ucy5zY2hlZHVsZXIuc2NoZWR1bGU8e30sIEJ1aWxkZXJJbnB1dCwgQnVpbGRlck91dHB1dD4obmFtZSwge30pO1xuICBsZXQgc3RhdGVTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdCB3b3Jrc3BhY2VSb290ID0gYXdhaXQgb3B0aW9ucy53b3Jrc3BhY2VSb290O1xuICBjb25zdCBjdXJyZW50RGlyZWN0b3J5ID0gYXdhaXQgb3B0aW9ucy5jdXJyZW50RGlyZWN0b3J5O1xuXG4gIGNvbnN0IGRlc2NyaXB0aW9uID0gYXdhaXQgam9iLmRlc2NyaXB0aW9uLnRvUHJvbWlzZSgpO1xuICBjb25zdCBpbmZvID0gZGVzY3JpcHRpb24uaW5mbyBhcyBCdWlsZGVySW5mbztcbiAgY29uc3QgaWQgPSArK191bmlxdWVJZDtcblxuICBjb25zdCBtZXNzYWdlID0ge1xuICAgIGlkLFxuICAgIGN1cnJlbnREaXJlY3Rvcnk6IHdvcmtzcGFjZVJvb3QsXG4gICAgd29ya3NwYWNlUm9vdDogY3VycmVudERpcmVjdG9yeSxcbiAgICBpbmZvOiBpbmZvLFxuICAgIG9wdGlvbnM6IGJ1aWxkT3B0aW9ucyxcbiAgICAuLi4ob3B0aW9ucy50YXJnZXQgPyB7IHRhcmdldDogb3B0aW9ucy50YXJnZXQgfSA6IHt9KSxcbiAgfTtcblxuICAvLyBXYWl0IGZvciB0aGUgam9iIHRvIGJlIHJlYWR5LlxuICBpZiAoam9iLnN0YXRlICE9PSBleHBlcmltZW50YWwuam9icy5Kb2JTdGF0ZS5TdGFydGVkKSB7XG4gICAgc3RhdGVTdWJzY3JpcHRpb24gPSBqb2Iub3V0Ym91bmRCdXMuc3Vic2NyaWJlKGV2ZW50ID0+IHtcbiAgICAgIGlmIChldmVudC5raW5kID09PSBleHBlcmltZW50YWwuam9icy5Kb2JPdXRib3VuZE1lc3NhZ2VLaW5kLlN0YXJ0KSB7XG4gICAgICAgIGpvYi5pbnB1dC5uZXh0KG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGpvYi5pbnB1dC5uZXh0KG1lc3NhZ2UpO1xuICB9XG5cbiAgY29uc3QgbG9nQ2hhbm5lbFN1YiA9IGpvYi5nZXRDaGFubmVsPGxvZ2dpbmcuTG9nRW50cnk+KCdsb2cnKS5zdWJzY3JpYmUoZW50cnkgPT4ge1xuICAgIGxvZ2dlci5uZXh0KGVudHJ5KTtcbiAgfSk7XG5cbiAgY29uc3QgcyA9IGpvYi5vdXRib3VuZEJ1cy5zdWJzY3JpYmUoXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZCxcbiAgICAoKSA9PiB7XG4gICAgICBzLnVuc3Vic2NyaWJlKCk7XG4gICAgICBsb2dDaGFubmVsU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICBpZiAoc3RhdGVTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgc3RhdGVTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICB9LFxuICApO1xuICBjb25zdCBvdXRwdXQgPSBqb2Iub3V0cHV0LnBpcGUoXG4gICAgbWFwKG91dHB1dCA9PiAoe1xuICAgICAgLi4ub3V0cHV0LFxuICAgICAgLi4ub3B0aW9ucy50YXJnZXQgPyB7IHRhcmdldDogb3B0aW9ucy50YXJnZXQgfSA6IDAsXG4gICAgICBpbmZvLFxuICAgIH0gYXMgQnVpbGRlck91dHB1dCkpLFxuICApO1xuXG4gIHJldHVybiB7XG4gICAgaWQsXG4gICAgaW5mbyxcbiAgICByZXN1bHQ6IG91dHB1dC5waXBlKGZpcnN0KCkpLnRvUHJvbWlzZSgpLFxuICAgIG91dHB1dCxcbiAgICBwcm9ncmVzczogam9iLmdldENoYW5uZWw8QnVpbGRlclByb2dyZXNzUmVwb3J0PigncHJvZ3Jlc3MnLCBwcm9ncmVzc1NjaGVtYSkucGlwZShcbiAgICAgIHNoYXJlUmVwbGF5KDEpLFxuICAgICksXG4gICAgc3RvcCgpIHtcbiAgICAgIGpvYi5zdG9wKCk7XG5cbiAgICAgIHJldHVybiBvdXRwdXQucGlwZShpZ25vcmVFbGVtZW50cygpKS50b1Byb21pc2UoKTtcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2NoZWR1bGVCeVRhcmdldChcbiAgdGFyZ2V0OiBUYXJnZXQsXG4gIG92ZXJyaWRlczoganNvbi5Kc29uT2JqZWN0LFxuICBvcHRpb25zOiB7XG4gICAgc2NoZWR1bGVyOiBleHBlcmltZW50YWwuam9icy5TY2hlZHVsZXIsXG4gICAgbG9nZ2VyOiBsb2dnaW5nLkxvZ2dlckFwaSxcbiAgICB3b3Jrc3BhY2VSb290OiBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz4sXG4gICAgY3VycmVudERpcmVjdG9yeTogc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+LFxuICB9LFxuKTogUHJvbWlzZTxCdWlsZGVyUnVuPiB7XG4gIHJldHVybiBzY2hlZHVsZUJ5TmFtZShgeyR7dGFyZ2V0U3RyaW5nRnJvbVRhcmdldCh0YXJnZXQpfX1gLCBvdmVycmlkZXMsIHtcbiAgICAuLi5vcHRpb25zLFxuICAgIHRhcmdldCxcbiAgICBsb2dnZXI6IG9wdGlvbnMubG9nZ2VyLFxuICB9KTtcbn1cbiJdfQ==